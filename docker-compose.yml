# =============================================================================
# N8N AI STARTER KIT - DOCKER COMPOSE CONFIGURATION
# =============================================================================
# This configuration supports multiple deployment profiles:
# - default: Core services (Traefik, n8n, PostgreSQL)
# - developer: + Qdrant, Web Interface, Document Processor, LightRAG
# - monitoring: + Grafana, Prometheus
# - analytics: + ETL Processor, ClickHouse
# - gpu: + GPU-accelerated AI services with local models

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  n8n-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  clickhouse_data:
    driver: local
  traefik_data:
    driver: local
  lightrag_data:
    driver: local
  gpu_models_cache:
    driver: local
  ollama_data:
    driver: local

# =============================================================================
# SERVICES
# =============================================================================
services:

  # ===========================================================================
  # TRAEFIK REVERSE PROXY (Profile: default)
  # ===========================================================================
  traefik:
    image: traefik:v3.0
    profiles: ["default"]
    container_name: n8n-traefik
    restart: unless-stopped
    command:
      # Global configuration
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
      
      # Log configuration
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      - --log.filepath=/var/log/traefik.log
      
      # API and Dashboard
      - --api.dashboard=true
      - --api.insecure=true
      
      # Entry points
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      
      # HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      
      # Docker provider
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=n8n-network
      
      # Let's Encrypt ACME
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
      
      # Security headers
      - --entrypoints.websecure.http.middlewares=security-headers@docker
    
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
      - ./config/traefik:/etc/traefik:ro
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      
      # Dashboard
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      
      # Basic auth middleware
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}:${TRAEFIK_DASHBOARD_HASHED_PASSWORD}"
      
      # Security headers middleware
      - "traefik.http.middlewares.security-headers.headers.customRequestHeaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.security-headers.headers.customResponseHeaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.security-headers.headers.customResponseHeaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.security-headers.headers.customResponseHeaders.Strict-Transport-Security=max-age=31536000; includeSubDomains"
      - "traefik.http.middlewares.security-headers.headers.customResponseHeaders.Content-Security-Policy=default-src 'self'"

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/rawdata"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================================================
  # POSTGRESQL DATABASE (Profile: default)
  # ===========================================================================
  postgres:
    image: pgvector/pgvector:pg15
    profiles: ["default"]
    container_name: n8n-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres:/docker-entrypoint-initdb.d:ro
    
    networks:
      - n8n-network
    
    ports:
      - "5432:5432"
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===========================================================================
  # N8N WORKFLOW AUTOMATION (Profile: default)
  # ===========================================================================
  n8n:
    image: n8nio/n8n:latest
    profiles: ["default"]
    container_name: n8n-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    
    environment:
      # Database configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      
      # N8N configuration
      N8N_HOST: ${N8N_DOMAIN}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      WEBHOOK_URL: ${N8N_PROTOCOL}://${N8N_DOMAIN}
      
      # Security
      N8N_PERSONAL_ACCESS_TOKEN: ${N8N_PERSONAL_ACCESS_TOKEN}
      N8N_PUBLIC_API_DISABLED: false
      N8N_SECURE_COOKIE: true
      
      # Features
      EXECUTIONS_PROCESS: main
      EXECUTIONS_DATA_SAVE_ON_ERROR: all
      EXECUTIONS_DATA_SAVE_ON_SUCCESS: all
      EXECUTIONS_DATA_MAX_AGE: 336
      
      # Timezone
      TZ: UTC
    
    ports:
      - "5678:5678"
    
    volumes:
      - ./data/n8n:/home/node/.n8n
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      
      # Security middleware
      - "traefik.http.routers.n8n.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===========================================================================
  # QDRANT VECTOR DATABASE (Profile: developer)
  # ===========================================================================
  qdrant:
    image: qdrant/qdrant:v1.7.4
    profiles: ["developer"]
    container_name: n8n-qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    
    volumes:
      - qdrant_data:/qdrant/storage
    
    networks:
      - n8n-network
    
    ports:
      - "6333:6333"
      - "6334:6334"
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===========================================================================
  # PROMETHEUS MONITORING (Profile: monitoring)
  # ===========================================================================
  prometheus:
    image: prom/prometheus:latest
    profiles: ["monitoring"]
    container_name: n8n-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    
    networks:
      - n8n-network
    
    ports:
      - "9090:9090"
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================================================
  # GRAFANA DASHBOARD (Profile: monitoring)
  # ===========================================================================
  grafana:
    image: grafana/grafana:latest
    profiles: ["monitoring"]
    container_name: n8n-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_PROVISIONING_PATH: /etc/grafana/provisioning
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/etc/grafana/dashboards:ro
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      
      # Security middleware
      - "traefik.http.routers.grafana.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===========================================================================
  # WEB INTERFACE SERVICE (Profile: developer)
  # ===========================================================================
  web-interface:
    build: 
      context: ./services/web-interface
      dockerfile: Dockerfile
    profiles: ["developer"]
    container_name: n8n-web-interface
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PORT: ${WEB_INTERFACE_PORT}
      WORKERS: ${WEB_INTERFACE_WORKERS}
      LOG_LEVEL: ${LOG_LEVEL}
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.web-interface.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/ui`)"
      - "traefik.http.routers.web-interface.entrypoints=websecure"
      - "traefik.http.routers.web-interface.tls.certresolver=letsencrypt"
      - "traefik.http.services.web-interface.loadbalancer.server.port=8000"
      
      # Security middleware
      - "traefik.http.routers.web-interface.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================================================
  # DOCUMENT PROCESSOR SERVICE (Profile: developer)
  # ===========================================================================
  document-processor:
    build:
      context: ./services/document-processor
      dockerfile: Dockerfile
    profiles: ["developer"]
    container_name: n8n-document-processor
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      QDRANT_API_KEY: ${QDRANT_API_KEY}
      SENTENCE_TRANSFORMERS_MODEL: ${DOC_PROCESSOR_MODEL}
      PORT: ${DOC_PROCESSOR_PORT}
      WORKERS: ${DOC_PROCESSOR_WORKERS}
      LOG_LEVEL: ${LOG_LEVEL}
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.document-processor.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/docs`)"
      - "traefik.http.routers.document-processor.entrypoints=websecure"
      - "traefik.http.routers.document-processor.tls.certresolver=letsencrypt"
      - "traefik.http.services.document-processor.loadbalancer.server.port=8001"
      
      # Security middleware
      - "traefik.http.routers.document-processor.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s  # Longer start period for model loading

  # ===========================================================================
  # ETL PROCESSOR SERVICE (Profile: analytics)
  # ===========================================================================
  etl-processor:
    build:
      context: ./services/etl-processor
      dockerfile: Dockerfile
    profiles: ["analytics"]
    container_name: n8n-etl-processor
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CLICKHOUSE_HOST: ${CLICKHOUSE_HOST}
      CLICKHOUSE_PORT: ${CLICKHOUSE_PORT}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      PORT: ${ETL_PROCESSOR_PORT}
      WORKERS: ${ETL_PROCESSOR_WORKERS}
      LOG_LEVEL: ${LOG_LEVEL}
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.etl-processor.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/etl`)"
      - "traefik.http.routers.etl-processor.entrypoints=websecure"
      - "traefik.http.routers.etl-processor.tls.certresolver=letsencrypt"
      - "traefik.http.services.etl-processor.loadbalancer.server.port=8002"
      
      # Security middleware
      - "traefik.http.routers.etl-processor.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================================================
  # LIGHTRAG SERVICE (Profile: developer)
  # ===========================================================================
  lightrag:
    build:
      context: ./services/lightrag
      dockerfile: Dockerfile
    profiles: ["developer"]
    container_name: n8n-lightrag
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_API_BASE: ${OPENAI_API_BASE}
      LIGHTRAG_PORT: ${LIGHTRAG_PORT}
      LIGHTRAG_WORKERS: ${LIGHTRAG_WORKERS}
      LIGHTRAG_WORKING_DIR: ${LIGHTRAG_WORKING_DIR}
      LIGHTRAG_LLM_MODEL: ${LIGHTRAG_LLM_MODEL}
      LIGHTRAG_EMBEDDING_MODEL: ${LIGHTRAG_EMBEDDING_MODEL}
      LIGHTRAG_MAX_TOKENS: ${LIGHTRAG_MAX_TOKENS}
      LIGHTRAG_CHUNK_SIZE: ${LIGHTRAG_CHUNK_SIZE}
      LIGHTRAG_OVERLAP_SIZE: ${LIGHTRAG_OVERLAP_SIZE}
      LOG_LEVEL: ${LOG_LEVEL}
    
    volumes:
      - lightrag_data:/app/data
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.lightrag.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/lightrag`)"
      - "traefik.http.routers.lightrag.entrypoints=websecure"
      - "traefik.http.routers.lightrag.tls.certresolver=letsencrypt"
      - "traefik.http.services.lightrag.loadbalancer.server.port=8003"
      
      # Security middleware
      - "traefik.http.routers.lightrag.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s  # Longer start period for model loading

  # ===========================================================================
  # CLICKHOUSE ANALYTICS DATABASE (Profile: analytics)
  # ===========================================================================
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    profiles: ["analytics"]
    container_name: n8n-clickhouse
    restart: unless-stopped
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./config/clickhouse:/docker-entrypoint-initdb.d:ro
    
    networks:
      - n8n-network
    
    ports:
      - "8123:8123"
      - "9000:9000"
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===========================================================================
  # GPU ACCELERATED SERVICES (Profile: gpu)
  # ===========================================================================
  
  # Document Processor with GPU acceleration
  document-processor-gpu:
    build:
      context: ./services/document-processor
      dockerfile: Dockerfile.gpu
    profiles: ["gpu"]
    container_name: n8n-document-processor-gpu
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Qdrant connection (optional, only if qdrant service is available)
      QDRANT_HOST: ${QDRANT_HOST:-qdrant}
      QDRANT_PORT: ${QDRANT_PORT:-6333}
      QDRANT_API_KEY: ${QDRANT_API_KEY:-}
      QDRANT_ENABLED: ${QDRANT_ENABLED:-false}
      SENTENCE_TRANSFORMERS_MODEL: ${DOC_PROCESSOR_MODEL}
      PORT: ${DOC_PROCESSOR_GPU_PORT:-8011}
      WORKERS: ${DOC_PROCESSOR_GPU_WORKERS:-1}
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-0}
      USE_GPU: "true"
      GPU_TYPE: ${GPU_TYPE:-nvidia}
      LOG_LEVEL: ${LOG_LEVEL}
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.document-processor-gpu.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/docs-gpu`)"
      - "traefik.http.routers.document-processor-gpu.entrypoints=websecure"
      - "traefik.http.routers.document-processor-gpu.tls.certresolver=letsencrypt"
      - "traefik.http.services.document-processor-gpu.loadbalancer.server.port=8011"
      
      # Security middleware
      - "traefik.http.routers.document-processor-gpu.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
  
  # LightRAG with GPU and local models
  lightrag-gpu:
    build:
      context: ./services/lightrag
      dockerfile: Dockerfile.gpu
    profiles: ["gpu"]
    container_name: n8n-lightrag-gpu
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_API_BASE: ${OPENAI_API_BASE}
      LIGHTRAG_PORT: ${LIGHTRAG_GPU_PORT:-8013}
      LIGHTRAG_WORKERS: ${LIGHTRAG_GPU_WORKERS:-1}
      LIGHTRAG_WORKING_DIR: ${LIGHTRAG_WORKING_DIR}
      LIGHTRAG_LLM_MODEL: ${LIGHTRAG_GPU_LLM_MODEL:-microsoft/DialoGPT-medium}
      LIGHTRAG_EMBEDDING_MODEL: ${LIGHTRAG_GPU_EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      LIGHTRAG_MAX_TOKENS: ${LIGHTRAG_MAX_TOKENS}
      LIGHTRAG_CHUNK_SIZE: ${LIGHTRAG_CHUNK_SIZE}
      LIGHTRAG_OVERLAP_SIZE: ${LIGHTRAG_OVERLAP_SIZE}
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-0}
      USE_LOCAL_MODELS: "true"
      USE_GPU: "true"
      GPU_TYPE: ${GPU_TYPE:-nvidia}
      TORCH_DEVICE: cuda
      LOG_LEVEL: ${LOG_LEVEL}
    
    volumes:
      - lightrag_data:/app/data
      - gpu_models_cache:/app/models
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.lightrag-gpu.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/lightrag-gpu`)"
      - "traefik.http.routers.lightrag-gpu.entrypoints=websecure"
      - "traefik.http.routers.lightrag-gpu.tls.certresolver=letsencrypt"
      - "traefik.http.services.lightrag-gpu.loadbalancer.server.port=8013"
      
      # Security middleware
      - "traefik.http.routers.lightrag-gpu.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 180s  # Extra time for model downloading
  
  # GPU Monitor service
  gpu-monitor:
    build:
      context: ./services/gpu-monitor
      dockerfile: Dockerfile
    profiles: ["gpu"]
    container_name: n8n-gpu-monitor
    restart: unless-stopped
    
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    
    environment:
      PORT: ${GPU_MONITOR_PORT:-8014}
      GPU_TYPE: ${GPU_TYPE:-nvidia}
      PROMETHEUS_ENABLED: "true"
      LOG_LEVEL: ${LOG_LEVEL}
    
    networks:
      - n8n-network
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.gpu-monitor.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/gpu`)"
      - "traefik.http.routers.gpu-monitor.entrypoints=websecure"
      - "traefik.http.routers.gpu-monitor.tls.certresolver=letsencrypt"
      - "traefik.http.services.gpu-monitor.loadbalancer.server.port=8014"
      
      # Security middleware
      - "traefik.http.routers.gpu-monitor.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8014/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===========================================================================
  # OLLAMA LOCAL LLM SERVER (Profile: gpu)
  # ===========================================================================
  ollama:
    image: ollama/ollama:latest
    profiles: ["gpu"]
    container_name: n8n-ollama
    restart: unless-stopped
    
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    environment:
      OLLAMA_HOST: "0.0.0.0:11434"
      NVIDIA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-0}
      GPU_TYPE: ${GPU_TYPE:-nvidia}
    
    volumes:
      - ollama_data:/root/.ollama
    
    networks:
      - n8n-network
    
    ports:
      - "11434:11434"
    
    labels:
      # Traefik configuration
      - "traefik.enable=true"
      - "traefik.http.routers.ollama.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/ollama`)"
      - "traefik.http.routers.ollama.entrypoints=websecure"
      - "traefik.http.routers.ollama.tls.certresolver=letsencrypt"
      - "traefik.http.services.ollama.loadbalancer.server.port=11434"
      
      # Security middleware
      - "traefik.http.routers.ollama.middlewares=security-headers@docker"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # ===========================================================================
  # SUPABASE SERVICE (Hybrid Approach - AI/Analytics Data)
  # ===========================================================================
  # Supabase is used for AI/analytics data storage while local PostgreSQL
  # handles core N8N application data. This provides optimal separation
  # of concerns and independent scalability.
  #
  # To use Supabase:
  # 1. Create a Supabase project at https://app.supabase.com
  # 2. Set SUPABASE_URL and SUPABASE_KEY in your .env file
  # 3. Enable the supabase profile: COMPOSE_PROFILES=default,developer,monitoring,supabase
  #
  # Example .env configuration:
  # SUPABASE_URL=https://your-project.supabase.co
  # SUPABASE_KEY=your-anon-or-service-key

# Volumes definitions
# ...
