name: Docker Build & Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-services:
    name: Build Service Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [
          "web-interface",
          "document-processor", 
          "etl-processor",
          "lightrag"
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test-images:
    name: Test Built Images
    runs-on: ubuntu-latest
    needs: [build-services]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create deployment test environment
        run: |
          cp template.env .env
          sed -i 's/change_this_password_123/test_password_123/g' .env
          sed -i 's/change_this_secret_456/test_secret_456/g' .env
          
          # Use built images instead of building locally
          export IMAGE_TAG=${GITHUB_SHA::8}
          sed -i "s|build: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-interface:sha-${IMAGE_TAG}|g" docker-compose.yml
          
      - name: Test deployment with built images
        run: |
          chmod +x scripts/test-profiles.sh
          ./scripts/test-profiles.sh basic --with-startup --timeout 600 --verbose

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test-images]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "This would typically deploy to a staging server"
          echo "Image tag: sha-${GITHUB_SHA::8}"
          
      - name: Run staging health checks
        run: |
          echo "🔍 Running staging health checks..."
          # Health check commands would go here
          
      - name: Notify deployment status
        run: |
          echo "✅ Staging deployment completed successfully"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production environment
        run: |
          echo "🚀 Deploying to production environment..."
          echo "This would typically deploy to production servers"
          echo "Release tag: $GITHUB_REF_NAME"
          
      - name: Run production health checks
        run: |
          echo "🔍 Running production health checks..."
          # Production health check commands
          
      - name: Create deployment summary
        run: |
          echo "## 🎉 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $GITHUB_REF_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** $GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY